############ Followed this article for using certbot for the SSL certification https://mindsers.blog/post/https-using-nginx-certbot-docker/
############ Solution when certificate was not being generated https://community.letsencrypt.org/t/the-certificate-authority-failed-to-download-the-temporary-challenge-files-created-by-certbot-connection-refused/159426
############ Followed this article for setting nginx for both frontend and backend https://stackoverflow.com/questions/70956559/nginx-configuration-for-an-app-with-backend-petitions-against-a-frontend-with-ss
############ For renewable of  SSL certification ,follow the same article https://mindsers.blog/post/https-using-nginx-certbot-docker/


############ Before generating certificate, nginx should be hosting for /.well-known/acme-challenge/ and it is where the 
############ the certificates will be created ...so certbot has write permission from the docker at /var/www/certbot
############ Step 1 Uncomment this upper section section with only /.well-known/acme-challenge/ at port 80
############ Step 2 Run the nginx with this config in server
############ Step 3 Run this command "docker-compose -f docker-compose-prod.yml run --rm  certbot certonly --webroot --webroot-path /var/www/certbot/ --dry-run -d sahajnepal.com"
############ Step 4 If the command is ran successfully, this is the indicator that we can move forward and there are some files in certbot folder
############ Step 5 Again run the command without dry-run i.e "docker-compose -f docker-compose-prod.yml run --rm  certbot certonly --webroot --webroot-path /var/www/certbot/ -d sahajnepal.com"
############ Step 6 Now we have the certificates at right location. Now we can enable Https setting in Nginx at port 443
############ Step 7 Again restart the server


# ########################## Nignx conf before Https certification in certbot ######################################
# server {
#     listen 80;
#     listen [::]:80;

# #    server_name localhost;
#     server_name sahajnepal.com www.sahajnepal.com;

#     server_tokens off;

#     location ^~ /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#     }
# }
# #######################################################################################

########################## Nignx conf after Https certification in certbot ######################################
server {
    listen 80;
    listen [::]:80;

    server_name sahajnepal.com www.sahajnepal.com;

    server_tokens off;

    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    #redirecting everything coming on 80 to https
    location / {
        return 301 https://$server_name$request_uri; 
    }
}

server {
    listen 443 default_server ssl http2;
    listen [::]:443 ssl http2;

    server_name sahajnepal.com www.sahajnepal.com;

    ssl_certificate /etc/nginx/ssl/live/sahajnepal.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/sahajnepal.com/privkey.pem;
    server_tokens off;

    location / {
        proxy_pass http://www.sahajnepal.com:3021; # this one works
        # client
        # sahaj_client_prod
        # proxy_pass http://client:3021;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_read_timeout 3600;                
    }

    location /api {
        proxy_pass http://www.sahajnepal.com:5021; #this one works
        # api
        # sahaj_api_prod
        # proxy_pass http://sahaj_api_prod:5021;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_read_timeout 3600;                
    }

    location /staff {
        proxy_pass http://www.sahajnepal.com:3031; #this one works
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_read_timeout 3600;                
    }


}
#######################################################################################