version: "3.7"

services:
  client:
    container_name: sahaj_client_prod
    build:
      context: client
      dockerfile: Dockerfile.prod
      # target: base
      # target: production
      target: runner
      args:
        NODE_ENV: ${NODE_ENV_PROD}
        NEXT_PUBLIC_NODE_API_BASE_URL: ${NEXT_PUBLIC_NODE_API_BASE_URL_PROD}
        NEXT_PUBLIC_NODE_API_VERSION: ${NEXT_PUBLIC_NODE_API_VERSION_PROD}

        NEXT_PUBLIC_FRONTEND_HOST: ${NEXT_PUBLIC_FRONTEND_HOST_PROD}
        NEXT_PUBLIC_FRONTEND_HOST_IP: ${NEXT_PUBLIC_FRONTEND_HOST_IP_PROD}
        NEXT_PUBLIC_FRONTEND_HOST_PORT: ${NEXT_PUBLIC_FRONTEND_HOST_PORT_PROD}

        NEXT_PUBLIC_PC_BROWSER_KEY_CLIENT_KEY: ${NEXT_PUBLIC_PC_BROWSER_KEY_CLIENT_KEY_PROD}
        NEXT_PUBLIC_ANDROID_BROWSER_CLIENT_KEY: ${NEXT_PUBLIC_ANDROID_BROWSER_CLIENT_KEY_PROD}
        NEXT_PUBLIC_ANDROID_APP_CLIENT_KEY: ${NEXT_PUBLIC_ANDROID_APP_CLIENT_KEY_PROD}
        NEXT_PUBLIC_IOS_BROWSER_CLIENT_KEY: ${NEXT_PUBLIC_IOS_BROWSER_CLIENT_KEY_PROD}
        NEXT_PUBLIC_IOS_APP_CLIENT_KEY: ${NEXT_PUBLIC_IOS_APP_CLIENT_KEY_PROD}
    working_dir: /app
    command:
      - sh
      - -c
      - |
        # npm install
        # ./node_modules/.bin/gulp build
        npm run start:prod
    links:
      - api
    # volumes:
    # - "./client:/app:cached"
    # - ./client/nginx/conf/:/etc/nginx/conf.d/:ro
    # - ./certbot/www:/var/www/certbot/:ro
    # - ./certbot/conf/:/etc/nginx/ssl/:ro
    # - ./client/nginx/log:/var/log/nginx
    ports:
      - "${NEXT_PUBLIC_FRONTEND_HOST_PORT_PROD}:${NEXT_PUBLIC_FRONTEND_HOST_PORT_PROD}"

    environment:
      NODE_ENV: ${NODE_ENV_PROD}
      NEXT_PUBLIC_NODE_API_BASE_URL: ${NEXT_PUBLIC_NODE_API_BASE_URL_PROD}
      NEXT_PUBLIC_NODE_API_VERSION: ${NEXT_PUBLIC_NODE_API_VERSION_PROD}

      NEXT_PUBLIC_FRONTEND_HOST: ${NEXT_PUBLIC_FRONTEND_HOST_PROD}
      NEXT_PUBLIC_FRONTEND_HOST_IP: ${NEXT_PUBLIC_FRONTEND_HOST_IP_PROD}
      NEXT_PUBLIC_FRONTEND_HOST_PORT: ${NEXT_PUBLIC_FRONTEND_HOST_PORT_PROD}

      NEXT_PUBLIC_PC_BROWSER_KEY_CLIENT_KEY: ${NEXT_PUBLIC_PC_BROWSER_KEY_CLIENT_KEY_PROD}
      NEXT_PUBLIC_ANDROID_BROWSER_CLIENT_KEY: ${NEXT_PUBLIC_ANDROID_BROWSER_CLIENT_KEY_PROD}
      NEXT_PUBLIC_ANDROID_APP_CLIENT_KEY: ${NEXT_PUBLIC_ANDROID_APP_CLIENT_KEY_PROD}
      NEXT_PUBLIC_IOS_BROWSER_CLIENT_KEY: ${NEXT_PUBLIC_IOS_BROWSER_CLIENT_KEY_PROD}
      NEXT_PUBLIC_IOS_APP_CLIENT_KEY: ${NEXT_PUBLIC_IOS_APP_CLIENT_KEY_PROD}
    restart: always
    # logging:
    #   driver: none

  staff:
    container_name: sahaj_staff_prod
    build:
      context: staff
      dockerfile: Dockerfile.prod
      # target: base
      # target: production
      target: runner
      args:
        NODE_ENV: ${NODE_ENV_PROD}
        NEXT_PUBLIC_NODE_API_BASE_URL: ${NEXT_PUBLIC_NODE_API_BASE_URL_PROD}
        NEXT_PUBLIC_NODE_API_VERSION: ${NEXT_PUBLIC_NODE_API_VERSION_PROD}

        NEXT_PUBLIC_STAFF_FRONTEND_HOST: ${NEXT_PUBLIC_STAFF_FRONTEND_HOST_PROD}
        NEXT_PUBLIC_STAFF_FRONTEND_HOST_IP: ${NEXT_PUBLIC_STAFF_FRONTEND_HOST_IP_PROD}
        NEXT_PUBLIC_STAFF_FRONTEND_HOST_PORT: ${NEXT_PUBLIC_STAFF_FRONTEND_HOST_PORT_PROD}
        NEXT_PUBLIC_STAFF_FRONTEND_VERSION: ${NEXT_PUBLIC_STAFF_FRONTEND_VERSION_PROD}

        NEXT_PUBLIC_STAFF_ADMIN_KEY: ${NEXT_PUBLIC_STAFF_ADMIN_KEY_PROD}
        # NEXT_PUBLIC_SERVICE_PROVIDER_KEY: ${NEXT_PUBLIC_SERVICE_PROVIDER_KEY_PROD}// will be used for service provider

    working_dir: /app
    command:
      - sh
      - -c
      - |
        # npm install
        npm run start:prod
    #     # ./node_modules/.bin/gulp build
    links:
      - api
    # volumes:
    #   - "./staff:/app:cached"
    ports:
      - "${NEXT_PUBLIC_STAFF_FRONTEND_HOST_PORT_PROD}:${NEXT_PUBLIC_STAFF_FRONTEND_HOST_PORT_PROD}"
    environment:
      NODE_ENV: ${NODE_ENV_PROD}
      NEXT_PUBLIC_NODE_API_BASE_URL: ${NEXT_PUBLIC_NODE_API_BASE_URL_PROD}
      NEXT_PUBLIC_NODE_API_VERSION: ${NEXT_PUBLIC_NODE_API_VERSION_PROD}

      NEXT_PUBLIC_STAFF_FRONTEND_HOST: ${NEXT_PUBLIC_STAFF_FRONTEND_HOST_PROD}
      NEXT_PUBLIC_STAFF_FRONTEND_HOST_IP: ${NEXT_PUBLIC_STAFF_FRONTEND_HOST_IP_PROD}
      NEXT_PUBLIC_STAFF_FRONTEND_HOST_PORT: ${NEXT_PUBLIC_STAFF_FRONTEND_HOST_PORT_PROD}
      NEXT_PUBLIC_STAFF_FRONTEND_VERSION: ${NEXT_PUBLIC_STAFF_FRONTEND_VERSION_PROD}

      NEXT_PUBLIC_STAFF_ADMIN_KEY: ${NEXT_PUBLIC_STAFF_ADMIN_KEY_PROD}
      # NEXT_PUBLIC_SERVICE_PROVIDER_KEY: ${NEXT_PUBLIC_SERVICE_PROVIDER_KEY_PROD}// will be used for service provider

    # restart: always
    # logging:
    #   driver: none

  api:
    container_name: sahaj_api_prod
    build:
      context: api
      dockerfile: Dockerfile.prod
      target: production
    # volumes:
    #   - ./api/:/app/
    # - ./api/cicd/aws:/root/.aws
    # image: ac-api:1.0.0-prod
    command:
      - /bin/sh
      - -c
      - |
        echo "Starting docker-compose's API service with commit tag: ${COMMIT_TAG}"
        # npm install
        # npm uninstall bcrypt
        # npm install bcrypt

        # chmod +x *.sh
        #./start-migration.sh
        # npm install
        npm run start:prod
        # npm  -v
        # npm cache verify
        # npm run seed

    environment:
      COMMIT_TAG: ${COMMIT_TAG}

      #common

      TZ: ${TZ}

      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET: ${AWS_SECRET}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BASE_PROJECT_PATH_COMMON: ${AWS_S3_BASE_PROJECT_PATH_COMMON}

      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_SENDER_phoneNumber: ${TWILIO_SENDER_phoneNumber}

      #backend
      AWS_S3_BASE_PROJECT_PATH: ${AWS_S3_BASE_PROJECT_PATH_PROD}

      NODE_ENV: ${NODE_ENV_PROD}
      MODE: ${MODE_PROD}

      NODE_API_HOST: ${NODE_API_HOST_PROD}
      NODE_API_HOST_IP: ${NODE_API_HOST_IP_PROD}
      NODE_API_PORT: ${NODE_API_PORT_PROD}
      NODE_API_VERSION: ${NODE_API_VERSION_PROD}
      NODE_API_SUB_VERSION: ${NODE_API_SUB_VERSION_PROD}

      POSTGRES_HOST: ${POSTGRES_HOST_PROD}
      POSTGRES_PORT: ${POSTGRES_PORT_PROD}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME_PROD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_PROD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE_PROD}
      RUN_MIGRATIONS: ${RUN_MIGRATIONS_PROD}
      MIGRATION_DIR: ${MIGRATION_DIR_PROD}
      # TYPEORM_SEEDING_FACTORIES: "src/database/factories/**/*{.ts,.js}"
      # TYPEORM_SEEDING_SEEDS: "src/database/seeds/**/*{.ts,.js}"

      SECRET: ${SECRET_PROD}

      JWT_SECRET: ${JWT_SECRET_PROD}
      DEFAULT_PASSPORT_STRATEGY: ${DEFAULT_PASSPORT_STRATEGY_PROD}

      NEXT_PUBLIC_PC_BROWSER_KEY_CLIENT_KEY: ${NEXT_PUBLIC_PC_BROWSER_KEY_CLIENT_KEY_PROD}
      NEXT_PUBLIC_ANDROID_BROWSER_CLIENT_KEY: ${NEXT_PUBLIC_ANDROID_BROWSER_CLIENT_KEY_PROD}
      NEXT_PUBLIC_ANDROID_APP_CLIENT_KEY: ${NEXT_PUBLIC_ANDROID_APP_CLIENT_KEY_PROD}
      NEXT_PUBLIC_IOS_BROWSER_CLIENT_KEY: ${NEXT_PUBLIC_IOS_BROWSER_CLIENT_KEY_PROD}
      NEXT_PUBLIC_IOS_APP_CLIENT_KEY: ${NEXT_PUBLIC_IOS_APP_CLIENT_KEY_PROD}

      NEXT_PUBLIC_SUPERADMIN_KEY: ${NEXT_PUBLIC_SUPERADMIN_KEY_PROD}
      NEXT_PUBLIC_STAFF_ADMIN_KEY: ${NEXT_PUBLIC_STAFF_ADMIN_KEY_PROD}
      NEXT_PUBLIC_SERVICE_PROVIDER_KEY: ${NEXT_PUBLIC_SERVICE_PROVIDER_KEY_PROD}

      REFERRAL_DISCOUNT_PERCENTAGE: ${REFERRAL_DISCOUNT_PERCENTAGE_PROD}
      REFEREE_DISCOUNT_PERCENTAGE: ${REFEREE_DISCOUNT_PERCENTAGE_PROD}
      USER_REFERRAL_TOKEN_EXPIRY_PERIOD_IN_MONTH: ${USER_REFERRAL_TOKEN_EXPIRY_PERIOD_IN_MONTH_PROD}

      DOES_SEND_SMS: ${DOES_SEND_SMS_PROD}
      SPARROW_SMS_TOKEN: ${SPARROW_SMS_TOKEN_PROD}
      SMS_SENDER: ${SMS_SENDER_PROD}

      #frontend
      NEXT_PUBLIC_FRONTEND_HOST: ${NEXT_PUBLIC_FRONTEND_HOST_PROD}
      NEXT_PUBLIC_FRONTEND_HOST_IP: ${NEXT_PUBLIC_FRONTEND_HOST_IP_PROD}
      NEXT_PUBLIC_FRONTEND_HOST_PORT: ${NEXT_PUBLIC_FRONTEND_HOST_PORT_PROD}
      NEXT_PUBLIC_FRONTEND_VERSION: ${NEXT_PUBLIC_FRONTEND_VERSION_PROD}

    ports:
      - "${NODE_API_PORT_PROD}:${NODE_API_PORT_PROD}"
    networks:
      - webnet
    restart: always
    depends_on:
      - db
    # logging:
    #   driver: none

  db:
    container_name: sahaj_db_prod
    build:
      context: database
      dockerfile: Dockerfile
    image: sahaj_db_img
    # healthcheck:
    #   test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
    #   timeout: 45s
    #   interval: 10s
    #   retries: 10
    networks:
      - webnet
    # env_file:
    #   - database/.env.prod
    environment:
      POSGRES_PASSWORD: ${POSTGRES_PASSWORD_PROD}
      POSTGRES_USER: ${POSTGRES_USERNAME_PROD}
      POSTGRES_DB: ${POSTGRES_DATABASE_PROD}
      TZ: ${TZ}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD_PROD}
      PGDATA: /var/lib/postgresql/data

    ports:
      - "${POSTGRES_PORT_PROD}:${POSTGRES_PORT_PROD}"
    volumes:
      - ./database/pgdata-prod:/var/lib/postgresql/data
    command: -p ${POSTGRES_PORT_PROD}
    restart: always
    # logging:
    #   driver: none

  pgadmin:
    image: dpage/pgadmin4
    container_name: sahaj_pgadmin4_prod
    restart: always
    networks:
      - webnet
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL_PROD}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD_PROD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT_PROD}
    volumes:
      - pgadmin-configs-sahaj-prod:/usr/share/pgadmin4/configs
    ports:
      - "${PGADMIN_LISTEN_PORT_PROD}:${PGADMIN_LISTEN_PORT_PROD}"
    depends_on:
      - db
    # logging:
    #   driver: none

  certbot:
    image: certbot/certbot:latest
    container_name: sahaj_certbot_prod
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
      - ./certbot/letsencrypt-log:/var/log/letsencrypt/
    # # when ever there is a need to renew the certificate simply run this docker compose command from cli
    # docker-compose -f docker-compose-prod.yaml run --rm certbot renew

  nginx:
    container_name: sahaj_nginx_prod
    build:
      context: ./
      dockerfile: nginx/Dockerfile.prod
    image: sahaj_nginx_img
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro
      - ./nginx/log:/var/log/nginx

      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    command:
      - /bin/sh
      - -c
      - |
        echo "Starting docker-compose's nginx service"
        nginx -g "daemon off;"
        # nginx -t
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - client
      - api
    restart: always
    logging:
      driver: none

  # # jenkins:
  # #   # for reference: https://www.cloudbees.com/blog/how-to-install-and-run-jenkins-with-docker-compose
  # #   image: jenkins/jenkins:lts
  # #   privileged: true
  # #   user: root
  # #   container_name: sahaj_jenkins_prod
  # #   ports:
  # #     - 8080:8080
  # #     - 50000:50000
  # #   volumes:
  # #     - ./jenkins_compose/jenkins_prod/jenkins_configuration:/var/jenkins_home
  # #     - /var/run/docker.sock:/var/run/docker.sock
  # #     - $(which docker):/usr/bin/docker

networks:
  webnet:

volumes:
  pgadmin-configs-sahaj-prod:
    driver: local
# ##### ports #######
# sahaj:
#   pgadmin : 5081
#   db      : 5421
#   api     : 5021
#   client  : dev 3021 / prod 3021
